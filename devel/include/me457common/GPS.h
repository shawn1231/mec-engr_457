// Generated by gencpp from file me457common/GPS.msg
// DO NOT EDIT!


#ifndef ME457COMMON_MESSAGE_GPS_H
#define ME457COMMON_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace me457common
{
template <class ContainerAllocator>
struct GPS_
{
  typedef GPS_<ContainerAllocator> Type;

  GPS_()
    : status(0)
    , mtow(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , elevation_ellipsoid(0.0)
    , elevation_msl(0.0)
    , horizontal_accuracy(0.0)
    , vertical_accuracy(0.0)  {
    }
  GPS_(const ContainerAllocator& _alloc)
    : status(0)
    , mtow(0.0)
    , longitude(0.0)
    , latitude(0.0)
    , elevation_ellipsoid(0.0)
    , elevation_msl(0.0)
    , horizontal_accuracy(0.0)
    , vertical_accuracy(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef float _mtow_type;
  _mtow_type mtow;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _elevation_ellipsoid_type;
  _elevation_ellipsoid_type elevation_ellipsoid;

   typedef float _elevation_msl_type;
  _elevation_msl_type elevation_msl;

   typedef float _horizontal_accuracy_type;
  _horizontal_accuracy_type horizontal_accuracy;

   typedef float _vertical_accuracy_type;
  _vertical_accuracy_type vertical_accuracy;





  typedef boost::shared_ptr< ::me457common::GPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::me457common::GPS_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_

typedef ::me457common::GPS_<std::allocator<void> > GPS;

typedef boost::shared_ptr< ::me457common::GPS > GPSPtr;
typedef boost::shared_ptr< ::me457common::GPS const> GPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::me457common::GPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::me457common::GPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace me457common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'me457common': ['/home/pi/catkin_ws/src/me457common/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::me457common::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::me457common::GPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me457common::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me457common::GPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me457common::GPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me457common::GPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::me457common::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eaff3430fb0e45c8c7614e5a10be7a35";
  }

  static const char* value(const ::me457common::GPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeaff3430fb0e45c8ULL;
  static const uint64_t static_value2 = 0xc7614e5a10be7a35ULL;
};

template<class ContainerAllocator>
struct DataType< ::me457common::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "me457common/GPS";
  }

  static const char* value(const ::me457common::GPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::me457common::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n\
float32 mtow\n\
float32 longitude\n\
float32 latitude\n\
float32 elevation_ellipsoid\n\
float32 elevation_msl\n\
float32 horizontal_accuracy\n\
float32 vertical_accuracy\n\
";
  }

  static const char* value(const ::me457common::GPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::me457common::GPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.mtow);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.elevation_ellipsoid);
      stream.next(m.elevation_msl);
      stream.next(m.horizontal_accuracy);
      stream.next(m.vertical_accuracy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::me457common::GPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::me457common::GPS_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "mtow: ";
    Printer<float>::stream(s, indent + "  ", v.mtow);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "elevation_ellipsoid: ";
    Printer<float>::stream(s, indent + "  ", v.elevation_ellipsoid);
    s << indent << "elevation_msl: ";
    Printer<float>::stream(s, indent + "  ", v.elevation_msl);
    s << indent << "horizontal_accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal_accuracy);
    s << indent << "vertical_accuracy: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_accuracy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ME457COMMON_MESSAGE_GPS_H
