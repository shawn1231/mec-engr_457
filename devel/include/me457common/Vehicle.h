// Generated by gencpp from file me457common/Vehicle.msg
// DO NOT EDIT!


#ifndef ME457COMMON_MESSAGE_VEHICLE_H
#define ME457COMMON_MESSAGE_VEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <me457common/IMU.h>
#include <me457common/AHRS.h>
#include <me457common/GPS.h>
#include <me457common/LED.h>
#include <me457common/RC.h>
#include <me457common/Servo.h>
#include <me457common/DCMotor.h>
#include <me457common/Stepper.h>
#include <me457common/Encoder.h>

namespace me457common
{
template <class ContainerAllocator>
struct Vehicle_
{
  typedef Vehicle_<ContainerAllocator> Type;

  Vehicle_()
    : header()
    , imu()
    , ahrs()
    , gps()
    , led()
    , rc()
    , servo()
    , dcmotor()
    , stepper()
    , encoder()  {
    }
  Vehicle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , imu(_alloc)
    , ahrs(_alloc)
    , gps(_alloc)
    , led(_alloc)
    , rc(_alloc)
    , servo(_alloc)
    , dcmotor(_alloc)
    , stepper(_alloc)
    , encoder(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::me457common::IMU_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef  ::me457common::AHRS_<ContainerAllocator>  _ahrs_type;
  _ahrs_type ahrs;

   typedef  ::me457common::GPS_<ContainerAllocator>  _gps_type;
  _gps_type gps;

   typedef  ::me457common::LED_<ContainerAllocator>  _led_type;
  _led_type led;

   typedef  ::me457common::RC_<ContainerAllocator>  _rc_type;
  _rc_type rc;

   typedef  ::me457common::Servo_<ContainerAllocator>  _servo_type;
  _servo_type servo;

   typedef  ::me457common::DCMotor_<ContainerAllocator>  _dcmotor_type;
  _dcmotor_type dcmotor;

   typedef  ::me457common::Stepper_<ContainerAllocator>  _stepper_type;
  _stepper_type stepper;

   typedef  ::me457common::Encoder_<ContainerAllocator>  _encoder_type;
  _encoder_type encoder;





  typedef boost::shared_ptr< ::me457common::Vehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::me457common::Vehicle_<ContainerAllocator> const> ConstPtr;

}; // struct Vehicle_

typedef ::me457common::Vehicle_<std::allocator<void> > Vehicle;

typedef boost::shared_ptr< ::me457common::Vehicle > VehiclePtr;
typedef boost::shared_ptr< ::me457common::Vehicle const> VehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::me457common::Vehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::me457common::Vehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace me457common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'me457common': ['/home/pi/catkin_ws/src/me457common/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::me457common::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::me457common::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me457common::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::me457common::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me457common::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::me457common::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::me457common::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "014b2fde68129d17046d004197d339b2";
  }

  static const char* value(const ::me457common::Vehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x014b2fde68129d17ULL;
  static const uint64_t static_value2 = 0x046d004197d339b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::me457common::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "me457common/Vehicle";
  }

  static const char* value(const ::me457common::Vehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::me457common::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
IMU imu\n\
AHRS ahrs\n\
GPS gps\n\
LED led\n\
RC rc\n\
Servo servo\n\
DCMotor dcmotor\n\
Stepper stepper\n\
Encoder encoder\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: me457common/IMU\n\
Header header\n\
Accelerometer accelerometer\n\
Gyroscope gyroscope\n\
Magnetometer magnetometer\n\
\n\
================================================================================\n\
MSG: me457common/Accelerometer\n\
Header header\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
================================================================================\n\
MSG: me457common/Gyroscope\n\
Header header\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
================================================================================\n\
MSG: me457common/Magnetometer\n\
Header header\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
================================================================================\n\
MSG: me457common/AHRS\n\
Header header\n\
Angular angular\n\
\n\
================================================================================\n\
MSG: me457common/Angular\n\
Header header\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
\n\
================================================================================\n\
MSG: me457common/GPS\n\
Header header\n\
int32 status\n\
float32 mtow\n\
float32 longitude\n\
float32 latitude\n\
float32 elevation_ellipsoid\n\
float32 elevation_msl\n\
float32 horizontal_accuracy\n\
float32 vertical_accuracy\n\
\n\
================================================================================\n\
MSG: me457common/LED\n\
Header header\n\
bool red\n\
bool green\n\
bool blue\n\
\n\
================================================================================\n\
MSG: me457common/RC\n\
Header header\n\
float32[16] channel\n\
\n\
================================================================================\n\
MSG: me457common/Servo\n\
Header header\n\
float32[14] channel\n\
\n\
================================================================================\n\
MSG: me457common/DCMotor\n\
Header header\n\
int16[2] speed\n\
\n\
================================================================================\n\
MSG: me457common/Stepper\n\
Header header\n\
float32 step\n\
float32 direction\n\
\n\
================================================================================\n\
MSG: me457common/Encoder\n\
Header header\n\
int32[2] count\n\
";
  }

  static const char* value(const ::me457common::Vehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::me457common::Vehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.imu);
      stream.next(m.ahrs);
      stream.next(m.gps);
      stream.next(m.led);
      stream.next(m.rc);
      stream.next(m.servo);
      stream.next(m.dcmotor);
      stream.next(m.stepper);
      stream.next(m.encoder);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::me457common::Vehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::me457common::Vehicle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::me457common::IMU_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "ahrs: ";
    s << std::endl;
    Printer< ::me457common::AHRS_<ContainerAllocator> >::stream(s, indent + "  ", v.ahrs);
    s << indent << "gps: ";
    s << std::endl;
    Printer< ::me457common::GPS_<ContainerAllocator> >::stream(s, indent + "  ", v.gps);
    s << indent << "led: ";
    s << std::endl;
    Printer< ::me457common::LED_<ContainerAllocator> >::stream(s, indent + "  ", v.led);
    s << indent << "rc: ";
    s << std::endl;
    Printer< ::me457common::RC_<ContainerAllocator> >::stream(s, indent + "  ", v.rc);
    s << indent << "servo: ";
    s << std::endl;
    Printer< ::me457common::Servo_<ContainerAllocator> >::stream(s, indent + "  ", v.servo);
    s << indent << "dcmotor: ";
    s << std::endl;
    Printer< ::me457common::DCMotor_<ContainerAllocator> >::stream(s, indent + "  ", v.dcmotor);
    s << indent << "stepper: ";
    s << std::endl;
    Printer< ::me457common::Stepper_<ContainerAllocator> >::stream(s, indent + "  ", v.stepper);
    s << indent << "encoder: ";
    s << std::endl;
    Printer< ::me457common::Encoder_<ContainerAllocator> >::stream(s, indent + "  ", v.encoder);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ME457COMMON_MESSAGE_VEHICLE_H
