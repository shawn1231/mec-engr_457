// Generated by gencpp from file navio2ros/AHRS.msg
// DO NOT EDIT!


#ifndef NAVIO2ROS_MESSAGE_AHRS_H
#define NAVIO2ROS_MESSAGE_AHRS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <navio2ros/Angular.h>

namespace navio2ros
{
template <class ContainerAllocator>
struct AHRS_
{
  typedef AHRS_<ContainerAllocator> Type;

  AHRS_()
    : angular()  {
    }
  AHRS_(const ContainerAllocator& _alloc)
    : angular(_alloc)  {
  (void)_alloc;
    }



   typedef  ::navio2ros::Angular_<ContainerAllocator>  _angular_type;
  _angular_type angular;




  typedef boost::shared_ptr< ::navio2ros::AHRS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navio2ros::AHRS_<ContainerAllocator> const> ConstPtr;

}; // struct AHRS_

typedef ::navio2ros::AHRS_<std::allocator<void> > AHRS;

typedef boost::shared_ptr< ::navio2ros::AHRS > AHRSPtr;
typedef boost::shared_ptr< ::navio2ros::AHRS const> AHRSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navio2ros::AHRS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navio2ros::AHRS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navio2ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'navio2ros': ['/home/pi/catkin_ws/src/navio2ros/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navio2ros::AHRS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navio2ros::AHRS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navio2ros::AHRS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navio2ros::AHRS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navio2ros::AHRS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navio2ros::AHRS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navio2ros::AHRS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8f2e835f7df7c60991a6cba8353dd78";
  }

  static const char* value(const ::navio2ros::AHRS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8f2e835f7df7c60ULL;
  static const uint64_t static_value2 = 0x991a6cba8353dd78ULL;
};

template<class ContainerAllocator>
struct DataType< ::navio2ros::AHRS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navio2ros/AHRS";
  }

  static const char* value(const ::navio2ros::AHRS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navio2ros::AHRS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Angular angular\n\
\n\
================================================================================\n\
MSG: navio2ros/Angular\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
";
  }

  static const char* value(const ::navio2ros::AHRS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navio2ros::AHRS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AHRS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navio2ros::AHRS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navio2ros::AHRS_<ContainerAllocator>& v)
  {
    s << indent << "angular: ";
    s << std::endl;
    Printer< ::navio2ros::Angular_<ContainerAllocator> >::stream(s, indent + "  ", v.angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIO2ROS_MESSAGE_AHRS_H
