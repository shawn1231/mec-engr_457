# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/Input.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import beginner_tutorials.msg

class Input(genpy.Message):
  _md5sum = "22c232fb67d50d195b4f6a0c22950751"
  _type = "beginner_tutorials/Input"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Barometer barometer
ADC adc
RC rc
IMU imu

================================================================================
MSG: beginner_tutorials/Barometer
float32 pressure
float32 temperature
float32 elevation

================================================================================
MSG: beginner_tutorials/ADC
float32[6] channel

================================================================================
MSG: beginner_tutorials/RC
float32[12] channel

================================================================================
MSG: beginner_tutorials/IMU
Accelerometer accelerometer
Gyroscope gyroscope
Magnetometer magnetometer

================================================================================
MSG: beginner_tutorials/Accelerometer
float32 x
float32 y
float32 z

================================================================================
MSG: beginner_tutorials/Gyroscope
float32 x
float32 y
float32 z

================================================================================
MSG: beginner_tutorials/Magnetometer
float32 x
float32 y
float32 z
"""
  __slots__ = ['barometer','adc','rc','imu']
  _slot_types = ['beginner_tutorials/Barometer','beginner_tutorials/ADC','beginner_tutorials/RC','beginner_tutorials/IMU']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       barometer,adc,rc,imu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Input, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.barometer is None:
        self.barometer = beginner_tutorials.msg.Barometer()
      if self.adc is None:
        self.adc = beginner_tutorials.msg.ADC()
      if self.rc is None:
        self.rc = beginner_tutorials.msg.RC()
      if self.imu is None:
        self.imu = beginner_tutorials.msg.IMU()
    else:
      self.barometer = beginner_tutorials.msg.Barometer()
      self.adc = beginner_tutorials.msg.ADC()
      self.rc = beginner_tutorials.msg.RC()
      self.imu = beginner_tutorials.msg.IMU()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.barometer.pressure, _x.barometer.temperature, _x.barometer.elevation))
      buff.write(_get_struct_6f().pack(*self.adc.channel))
      buff.write(_get_struct_12f().pack(*self.rc.channel))
      _x = self
      buff.write(_get_struct_9f().pack(_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.barometer is None:
        self.barometer = beginner_tutorials.msg.Barometer()
      if self.adc is None:
        self.adc = beginner_tutorials.msg.ADC()
      if self.rc is None:
        self.rc = beginner_tutorials.msg.RC()
      if self.imu is None:
        self.imu = beginner_tutorials.msg.IMU()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.barometer.pressure, _x.barometer.temperature, _x.barometer.elevation,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 24
      self.adc.channel = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 48
      self.rc.channel = _get_struct_12f().unpack(str[start:end])
      _x = self
      start = end
      end += 36
      (_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3f().pack(_x.barometer.pressure, _x.barometer.temperature, _x.barometer.elevation))
      buff.write(self.adc.channel.tostring())
      buff.write(self.rc.channel.tostring())
      _x = self
      buff.write(_get_struct_9f().pack(_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.barometer is None:
        self.barometer = beginner_tutorials.msg.Barometer()
      if self.adc is None:
        self.adc = beginner_tutorials.msg.ADC()
      if self.rc is None:
        self.rc = beginner_tutorials.msg.RC()
      if self.imu is None:
        self.imu = beginner_tutorials.msg.IMU()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.barometer.pressure, _x.barometer.temperature, _x.barometer.elevation,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 24
      self.adc.channel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 48
      self.rc.channel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      _x = self
      start = end
      end += 36
      (_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
