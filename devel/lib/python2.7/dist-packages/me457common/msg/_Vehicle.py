# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from me457common/Vehicle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import me457common.msg
import std_msgs.msg

class Vehicle(genpy.Message):
  _md5sum = "014b2fde68129d17046d004197d339b2"
  _type = "me457common/Vehicle"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
IMU imu
AHRS ahrs
GPS gps
LED led
RC rc
Servo servo
DCMotor dcmotor
Stepper stepper
Encoder encoder

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: me457common/IMU
Header header
Accelerometer accelerometer
Gyroscope gyroscope
Magnetometer magnetometer

================================================================================
MSG: me457common/Accelerometer
Header header
float32 x
float32 y
float32 z

================================================================================
MSG: me457common/Gyroscope
Header header
float32 x
float32 y
float32 z

================================================================================
MSG: me457common/Magnetometer
Header header
float32 x
float32 y
float32 z

================================================================================
MSG: me457common/AHRS
Header header
Angular angular

================================================================================
MSG: me457common/Angular
Header header
float32 roll
float32 pitch
float32 yaw

================================================================================
MSG: me457common/GPS
Header header
int32 status
float32 mtow
float32 longitude
float32 latitude
float32 elevation_ellipsoid
float32 elevation_msl
float32 horizontal_accuracy
float32 vertical_accuracy

================================================================================
MSG: me457common/LED
Header header
bool red
bool green
bool blue

================================================================================
MSG: me457common/RC
Header header
float32[16] channel

================================================================================
MSG: me457common/Servo
Header header
float32[14] channel

================================================================================
MSG: me457common/DCMotor
Header header
int16[2] speed

================================================================================
MSG: me457common/Stepper
Header header
float32 step
float32 direction

================================================================================
MSG: me457common/Encoder
Header header
int32[2] count
"""
  __slots__ = ['header','imu','ahrs','gps','led','rc','servo','dcmotor','stepper','encoder']
  _slot_types = ['std_msgs/Header','me457common/IMU','me457common/AHRS','me457common/GPS','me457common/LED','me457common/RC','me457common/Servo','me457common/DCMotor','me457common/Stepper','me457common/Encoder']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,imu,ahrs,gps,led,rc,servo,dcmotor,stepper,encoder

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vehicle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = me457common.msg.IMU()
      if self.ahrs is None:
        self.ahrs = me457common.msg.AHRS()
      if self.gps is None:
        self.gps = me457common.msg.GPS()
      if self.led is None:
        self.led = me457common.msg.LED()
      if self.rc is None:
        self.rc = me457common.msg.RC()
      if self.servo is None:
        self.servo = me457common.msg.Servo()
      if self.dcmotor is None:
        self.dcmotor = me457common.msg.DCMotor()
      if self.stepper is None:
        self.stepper = me457common.msg.Stepper()
      if self.encoder is None:
        self.encoder = me457common.msg.Encoder()
    else:
      self.header = std_msgs.msg.Header()
      self.imu = me457common.msg.IMU()
      self.ahrs = me457common.msg.AHRS()
      self.gps = me457common.msg.GPS()
      self.led = me457common.msg.LED()
      self.rc = me457common.msg.RC()
      self.servo = me457common.msg.Servo()
      self.dcmotor = me457common.msg.DCMotor()
      self.stepper = me457common.msg.Stepper()
      self.encoder = me457common.msg.Encoder()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.accelerometer.header.seq, _x.imu.accelerometer.header.stamp.secs, _x.imu.accelerometer.header.stamp.nsecs))
      _x = self.imu.accelerometer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.header.seq, _x.imu.gyroscope.header.stamp.secs, _x.imu.gyroscope.header.stamp.nsecs))
      _x = self.imu.gyroscope.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.header.seq, _x.imu.magnetometer.header.stamp.secs, _x.imu.magnetometer.header.stamp.nsecs))
      _x = self.imu.magnetometer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z, _x.ahrs.header.seq, _x.ahrs.header.stamp.secs, _x.ahrs.header.stamp.nsecs))
      _x = self.ahrs.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ahrs.angular.header.seq, _x.ahrs.angular.header.stamp.secs, _x.ahrs.angular.header.stamp.nsecs))
      _x = self.ahrs.angular.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.ahrs.angular.roll, _x.ahrs.angular.pitch, _x.ahrs.angular.yaw, _x.gps.header.seq, _x.gps.header.stamp.secs, _x.gps.header.stamp.nsecs))
      _x = self.gps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i7f3I().pack(_x.gps.status, _x.gps.mtow, _x.gps.longitude, _x.gps.latitude, _x.gps.elevation_ellipsoid, _x.gps.elevation_msl, _x.gps.horizontal_accuracy, _x.gps.vertical_accuracy, _x.led.header.seq, _x.led.header.stamp.secs, _x.led.header.stamp.nsecs))
      _x = self.led.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3I().pack(_x.led.red, _x.led.green, _x.led.blue, _x.rc.header.seq, _x.rc.header.stamp.secs, _x.rc.header.stamp.nsecs))
      _x = self.rc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_16f().pack(*self.rc.channel))
      _x = self
      buff.write(_get_struct_3I().pack(_x.servo.header.seq, _x.servo.header.stamp.secs, _x.servo.header.stamp.nsecs))
      _x = self.servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_14f().pack(*self.servo.channel))
      _x = self
      buff.write(_get_struct_3I().pack(_x.dcmotor.header.seq, _x.dcmotor.header.stamp.secs, _x.dcmotor.header.stamp.nsecs))
      _x = self.dcmotor.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_2h().pack(*self.dcmotor.speed))
      _x = self
      buff.write(_get_struct_3I().pack(_x.stepper.header.seq, _x.stepper.header.stamp.secs, _x.stepper.header.stamp.nsecs))
      _x = self.stepper.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.stepper.step, _x.stepper.direction, _x.encoder.header.seq, _x.encoder.header.stamp.secs, _x.encoder.header.stamp.nsecs))
      _x = self.encoder.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_2i().pack(*self.encoder.count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = me457common.msg.IMU()
      if self.ahrs is None:
        self.ahrs = me457common.msg.AHRS()
      if self.gps is None:
        self.gps = me457common.msg.GPS()
      if self.led is None:
        self.led = me457common.msg.LED()
      if self.rc is None:
        self.rc = me457common.msg.RC()
      if self.servo is None:
        self.servo = me457common.msg.Servo()
      if self.dcmotor is None:
        self.dcmotor = me457common.msg.DCMotor()
      if self.stepper is None:
        self.stepper = me457common.msg.Stepper()
      if self.encoder is None:
        self.encoder = me457common.msg.Encoder()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.accelerometer.header.seq, _x.imu.accelerometer.header.stamp.secs, _x.imu.accelerometer.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.accelerometer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.accelerometer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.header.seq, _x.imu.gyroscope.header.stamp.secs, _x.imu.gyroscope.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.gyroscope.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.gyroscope.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.header.seq, _x.imu.magnetometer.header.stamp.secs, _x.imu.magnetometer.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.magnetometer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.magnetometer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z, _x.ahrs.header.seq, _x.ahrs.header.stamp.secs, _x.ahrs.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ahrs.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ahrs.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ahrs.angular.header.seq, _x.ahrs.angular.header.stamp.secs, _x.ahrs.angular.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ahrs.angular.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ahrs.angular.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.ahrs.angular.roll, _x.ahrs.angular.pitch, _x.ahrs.angular.yaw, _x.gps.header.seq, _x.gps.header.stamp.secs, _x.gps.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.gps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.gps.status, _x.gps.mtow, _x.gps.longitude, _x.gps.latitude, _x.gps.elevation_ellipsoid, _x.gps.elevation_msl, _x.gps.horizontal_accuracy, _x.gps.vertical_accuracy, _x.led.header.seq, _x.led.header.stamp.secs, _x.led.header.stamp.nsecs,) = _get_struct_i7f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.led.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.led.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.led.red, _x.led.green, _x.led.blue, _x.rc.header.seq, _x.rc.header.stamp.secs, _x.rc.header.stamp.nsecs,) = _get_struct_3B3I().unpack(str[start:end])
      self.led.red = bool(self.led.red)
      self.led.green = bool(self.led.green)
      self.led.blue = bool(self.led.blue)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rc.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rc.header.frame_id = str[start:end]
      start = end
      end += 64
      self.rc.channel = _get_struct_16f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.servo.header.seq, _x.servo.header.stamp.secs, _x.servo.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.servo.header.frame_id = str[start:end]
      start = end
      end += 56
      self.servo.channel = _get_struct_14f().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.dcmotor.header.seq, _x.dcmotor.header.stamp.secs, _x.dcmotor.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dcmotor.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.dcmotor.header.frame_id = str[start:end]
      start = end
      end += 4
      self.dcmotor.speed = _get_struct_2h().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.stepper.header.seq, _x.stepper.header.stamp.secs, _x.stepper.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.stepper.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.stepper.step, _x.stepper.direction, _x.encoder.header.seq, _x.encoder.header.stamp.secs, _x.encoder.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoder.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.encoder.header.frame_id = str[start:end]
      start = end
      end += 8
      self.encoder.count = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.accelerometer.header.seq, _x.imu.accelerometer.header.stamp.secs, _x.imu.accelerometer.header.stamp.nsecs))
      _x = self.imu.accelerometer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.header.seq, _x.imu.gyroscope.header.stamp.secs, _x.imu.gyroscope.header.stamp.nsecs))
      _x = self.imu.gyroscope.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.header.seq, _x.imu.magnetometer.header.stamp.secs, _x.imu.magnetometer.header.stamp.nsecs))
      _x = self.imu.magnetometer.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z, _x.ahrs.header.seq, _x.ahrs.header.stamp.secs, _x.ahrs.header.stamp.nsecs))
      _x = self.ahrs.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ahrs.angular.header.seq, _x.ahrs.angular.header.stamp.secs, _x.ahrs.angular.header.stamp.nsecs))
      _x = self.ahrs.angular.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3f3I().pack(_x.ahrs.angular.roll, _x.ahrs.angular.pitch, _x.ahrs.angular.yaw, _x.gps.header.seq, _x.gps.header.stamp.secs, _x.gps.header.stamp.nsecs))
      _x = self.gps.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i7f3I().pack(_x.gps.status, _x.gps.mtow, _x.gps.longitude, _x.gps.latitude, _x.gps.elevation_ellipsoid, _x.gps.elevation_msl, _x.gps.horizontal_accuracy, _x.gps.vertical_accuracy, _x.led.header.seq, _x.led.header.stamp.secs, _x.led.header.stamp.nsecs))
      _x = self.led.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B3I().pack(_x.led.red, _x.led.green, _x.led.blue, _x.rc.header.seq, _x.rc.header.stamp.secs, _x.rc.header.stamp.nsecs))
      _x = self.rc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.rc.channel.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.servo.header.seq, _x.servo.header.stamp.secs, _x.servo.header.stamp.nsecs))
      _x = self.servo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.servo.channel.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.dcmotor.header.seq, _x.dcmotor.header.stamp.secs, _x.dcmotor.header.stamp.nsecs))
      _x = self.dcmotor.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.dcmotor.speed.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.stepper.header.seq, _x.stepper.header.stamp.secs, _x.stepper.header.stamp.nsecs))
      _x = self.stepper.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2f3I().pack(_x.stepper.step, _x.stepper.direction, _x.encoder.header.seq, _x.encoder.header.stamp.secs, _x.encoder.header.stamp.nsecs))
      _x = self.encoder.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.encoder.count.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = me457common.msg.IMU()
      if self.ahrs is None:
        self.ahrs = me457common.msg.AHRS()
      if self.gps is None:
        self.gps = me457common.msg.GPS()
      if self.led is None:
        self.led = me457common.msg.LED()
      if self.rc is None:
        self.rc = me457common.msg.RC()
      if self.servo is None:
        self.servo = me457common.msg.Servo()
      if self.dcmotor is None:
        self.dcmotor = me457common.msg.DCMotor()
      if self.stepper is None:
        self.stepper = me457common.msg.Stepper()
      if self.encoder is None:
        self.encoder = me457common.msg.Encoder()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.accelerometer.header.seq, _x.imu.accelerometer.header.stamp.secs, _x.imu.accelerometer.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.accelerometer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.accelerometer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.accelerometer.x, _x.imu.accelerometer.y, _x.imu.accelerometer.z, _x.imu.gyroscope.header.seq, _x.imu.gyroscope.header.stamp.secs, _x.imu.gyroscope.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.gyroscope.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.gyroscope.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.gyroscope.x, _x.imu.gyroscope.y, _x.imu.gyroscope.z, _x.imu.magnetometer.header.seq, _x.imu.magnetometer.header.stamp.secs, _x.imu.magnetometer.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.magnetometer.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.imu.magnetometer.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.imu.magnetometer.x, _x.imu.magnetometer.y, _x.imu.magnetometer.z, _x.ahrs.header.seq, _x.ahrs.header.stamp.secs, _x.ahrs.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ahrs.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ahrs.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ahrs.angular.header.seq, _x.ahrs.angular.header.stamp.secs, _x.ahrs.angular.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ahrs.angular.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ahrs.angular.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.ahrs.angular.roll, _x.ahrs.angular.pitch, _x.ahrs.angular.yaw, _x.gps.header.seq, _x.gps.header.stamp.secs, _x.gps.header.stamp.nsecs,) = _get_struct_3f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gps.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.gps.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.gps.status, _x.gps.mtow, _x.gps.longitude, _x.gps.latitude, _x.gps.elevation_ellipsoid, _x.gps.elevation_msl, _x.gps.horizontal_accuracy, _x.gps.vertical_accuracy, _x.led.header.seq, _x.led.header.stamp.secs, _x.led.header.stamp.nsecs,) = _get_struct_i7f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.led.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.led.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 15
      (_x.led.red, _x.led.green, _x.led.blue, _x.rc.header.seq, _x.rc.header.stamp.secs, _x.rc.header.stamp.nsecs,) = _get_struct_3B3I().unpack(str[start:end])
      self.led.red = bool(self.led.red)
      self.led.green = bool(self.led.green)
      self.led.blue = bool(self.led.blue)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rc.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rc.header.frame_id = str[start:end]
      start = end
      end += 64
      self.rc.channel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      _x = self
      start = end
      end += 12
      (_x.servo.header.seq, _x.servo.header.stamp.secs, _x.servo.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.servo.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.servo.header.frame_id = str[start:end]
      start = end
      end += 56
      self.servo.channel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=14)
      _x = self
      start = end
      end += 12
      (_x.dcmotor.header.seq, _x.dcmotor.header.stamp.secs, _x.dcmotor.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.dcmotor.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.dcmotor.header.frame_id = str[start:end]
      start = end
      end += 4
      self.dcmotor.speed = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=2)
      _x = self
      start = end
      end += 12
      (_x.stepper.header.seq, _x.stepper.header.stamp.secs, _x.stepper.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.stepper.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.stepper.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.stepper.step, _x.stepper.direction, _x.encoder.header.seq, _x.encoder.header.stamp.secs, _x.encoder.header.stamp.nsecs,) = _get_struct_2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.encoder.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.encoder.header.frame_id = str[start:end]
      start = end
      end += 8
      self.encoder.count = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f3I = None
def _get_struct_2f3I():
    global _struct_2f3I
    if _struct_2f3I is None:
        _struct_2f3I = struct.Struct("<2f3I")
    return _struct_2f3I
_struct_3f3I = None
def _get_struct_3f3I():
    global _struct_3f3I
    if _struct_3f3I is None:
        _struct_3f3I = struct.Struct("<3f3I")
    return _struct_3f3I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_3B3I = None
def _get_struct_3B3I():
    global _struct_3B3I
    if _struct_3B3I is None:
        _struct_3B3I = struct.Struct("<3B3I")
    return _struct_3B3I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_i7f3I = None
def _get_struct_i7f3I():
    global _struct_i7f3I
    if _struct_i7f3I is None:
        _struct_i7f3I = struct.Struct("<i7f3I")
    return _struct_i7f3I
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
