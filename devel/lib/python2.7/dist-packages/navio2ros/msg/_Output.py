# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navio2ros/Output.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import navio2ros.msg

class Output(genpy.Message):
  _md5sum = "fbd4021ec4ea8e258f9330f6d559599c"
  _type = "navio2ros/Output"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PWM pwm
LED led

================================================================================
MSG: navio2ros/PWM
float32[14] channel

================================================================================
MSG: navio2ros/LED
bool red
bool green
bool blue
"""
  __slots__ = ['pwm','led']
  _slot_types = ['navio2ros/PWM','navio2ros/LED']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pwm,led

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Output, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pwm is None:
        self.pwm = navio2ros.msg.PWM()
      if self.led is None:
        self.led = navio2ros.msg.LED()
    else:
      self.pwm = navio2ros.msg.PWM()
      self.led = navio2ros.msg.LED()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_14f().pack(*self.pwm.channel))
      _x = self
      buff.write(_get_struct_3B().pack(_x.led.red, _x.led.green, _x.led.blue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pwm is None:
        self.pwm = navio2ros.msg.PWM()
      if self.led is None:
        self.led = navio2ros.msg.LED()
      end = 0
      start = end
      end += 56
      self.pwm.channel = _get_struct_14f().unpack(str[start:end])
      _x = self
      start = end
      end += 3
      (_x.led.red, _x.led.green, _x.led.blue,) = _get_struct_3B().unpack(str[start:end])
      self.led.red = bool(self.led.red)
      self.led.green = bool(self.led.green)
      self.led.blue = bool(self.led.blue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.pwm.channel.tostring())
      _x = self
      buff.write(_get_struct_3B().pack(_x.led.red, _x.led.green, _x.led.blue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pwm is None:
        self.pwm = navio2ros.msg.PWM()
      if self.led is None:
        self.led = navio2ros.msg.LED()
      end = 0
      start = end
      end += 56
      self.pwm.channel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=14)
      _x = self
      start = end
      end += 3
      (_x.led.red, _x.led.green, _x.led.blue,) = _get_struct_3B().unpack(str[start:end])
      self.led.red = bool(self.led.red)
      self.led.green = bool(self.led.green)
      self.led.blue = bool(self.led.blue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14f = None
def _get_struct_14f():
    global _struct_14f
    if _struct_14f is None:
        _struct_14f = struct.Struct("<14f")
    return _struct_14f
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
